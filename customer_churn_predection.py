# -*- coding: utf-8 -*-
"""Customer_churn_predection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Knacc_kf3EbLGovaCx956smek02el0T4

#**Libraries**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""#**DATA LOAD**

"""

df=pd.read_csv('/content/WA_Fn-UseC_-Telco-Customer-Churn.csv')

df.head()

df.tail()

df.info()

df.describe()

"""# **Data Preprocessing**"""

df.isnull().sum().sum()

#The output Index([488, 753, 936, 1082, 1340, 3331, 3826, 4380, 5218, 6670, 6754], dtype='int64')
#shows the index numbers of the rows where the 'tenure' is 0.
#This is useful for identifying specific rows that might need to be handled, as a tenure of 0 might indicate new customers or data entry issues.
df[df['tenure'] ==0 ].index

df.drop(labels=df[df['tenure'] == 0].index, axis=0, inplace=True)
df[df['tenure'] == 0].index

label_encoder = LabelEncoder()

df['gender']=label_encoder.fit_transform(df['gender'])

df.head()

def obj_to_int(df_series):
    if df_series.dtype == 'object':
        df_series = label_encoder.fit_transform(df_series)
    return df_series

df=df.apply(lambda x: obj_to_int(x))

df.head()

df=df.drop('customerID', axis=1)

"""# **EDA**"""

df.corr()

churn_corr=df.corr()['Churn']

churn_corr

plt.figure(figsize=(6,4))
sns.countplot(x='Churn', data=df)
plt.title('Churn Distribution')
plt.show()

plt.figure(figsize=(6,4))
sns.countplot(x='gender', data=df)
plt.title('Gender Distribution')
plt.show()

plt.figure(figsize=(10,10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

X = df.drop(['Churn'], axis=1)
y = df['Churn']

"""# **Data Split**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **Random Forest**"""

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

rf_accuracy = accuracy_score(y_test, rf_pred)
rf_classification_report = classification_report(y_test, rf_pred)
rf_conf_matrix = confusion_matrix(y_test, rf_pred)

rf_accuracy

rf_classification_report

rf_conf_matrix

"""# **Decision Tree**"""

dt_model=DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_pred=dt_model.predict(X_test)

dt_accuracy = accuracy_score(y_test, dt_pred)
dt_classification_report = classification_report(y_test, dt_pred)
dt_conf_matrix = confusion_matrix(y_test, dt_pred)

dt_accuracy

dt_classification_report

dt_conf_matrix

"""# **XGBoost**"""

XGB_model=XGBClassifier(random_state=42)
XGB_model.fit(X_train, y_train)
XGB_pred=XGB_model.predict(X_test)

XGB_accuracy=accuracy_score(y_test, XGB_pred)
XGB_classification_report = classification_report(y_test, XGB_pred)
XGB_conf_matrix = confusion_matrix(y_test, XGB_pred)

XGB_accuracy

XGB_classification_report

XGB_conf_matrix

"""# **SVM**"""

SVC_model=SVC(random_state=42)
SVC_model.fit(X_train, y_train)
SVC_pred=SVC_model.predict(X_test)

SVC_accuracy=accuracy_score(y_test, SVC_pred)
SVC_classification_report = classification_report(y_test, SVC_pred)
SVC_conf_matrix = confusion_matrix(y_test, SVC_pred)

SVC_accuracy

SVC_classification_report

SVC_conf_matrix

"""# **Gradient Boosting**"""

gb_model=GradientBoostingClassifier(random_state=42)
gb_model.fit(X_train, y_train)
gb_pred=gb_model.predict(X_test)

gb_accuracy=accuracy_score(y_test, gb_pred)
gb_classification_report = classification_report(y_test, gb_pred)
gb_conf_matrix = confusion_matrix(y_test, gb_pred)

gb_accuracy

gb_classification_report

gb_conf_matrix

"""# **Logistic Regression**"""

lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)
lr_pred = lr_model.predict(X_test)

lr_accuracy = accuracy_score(y_test, lr_pred)
lr_classification_report = classification_report(y_test, lr_pred)
lr_conf_matrix = confusion_matrix(y_test, lr_pred)

lr_accuracy

lr_classification_report

lr_conf_matrix

accuracy_data = {
    'Model': ['Decision Tree', 'Support Vector Machine','Logistic Regression','Gradiant Booster','XGB'],
    'Accuracy': [dt_accuracy, SVC_accuracy,lr_accuracy,gb_accuracy,XGB_accuracy],
    'Classification Report': [dt_classification_report, SVC_classification_report,lr_classification_report,gb_classification_report,XGB_classification_report],
}

df = pd.DataFrame(accuracy_data)

df



# IQR Method Example

# Select the numerical columns from the dataframe
numerical_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']

for col in numerical_cols:
    print(f"Checking for outliers in '{col}' using IQR method:")

    # Calculate Q1 and Q3
    Q1 = X[col].quantile(0.25)
    Q3 = X[col].quantile(0.75)
    IQR = Q3 - Q1

    # Define bounds
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Identify outliers
    outliers = X[(X[col] < lower_bound) | (X[col] > upper_bound)]

    print(f"Potential outliers in '{col}':")
    display(outliers[[col]]) # Display only the outlier values
    print("-" * 30) # Separator for clarity

# Z-score Method Example
from scipy.stats import zscore

numerical_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']

for col in numerical_cols:
    print(f"Checking for outliers in '{col}' using Z-score method:")

    # Calculate the Z-scores for the column
    z_scores = zscore(X[col])

    # Define a Z-score threshold (e.g., 3)
    abs_z_scores = np.abs(z_scores)
    threshold = 3

    # Identify outliers
    outliers = X[abs_z_scores > threshold]

    print(f"Potential outliers in '{col}':")
    display(outliers[[col]]) # Display only the outlier values
    print("-" * 30) # Separator for clarity

numerical_cols_to_check = ['MonthlyCharges', 'TotalCharges']

for col in numerical_cols_to_check:
    print(f"Checking for rows with value 0 in '{col}':")
    rows_with_zero = df[df[col] == 0]
    display(rows_with_zero)
    print("-" * 30) # Separator for clarity